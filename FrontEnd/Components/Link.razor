@using PlaidQuickstartBlazor.Shared
@inject ContextContainer context
@inject HttpClient Http
@inject IJSRuntime JS

<div data-test-id="Link">
    <button type="button" class="btn btn-primary" @onclick="LaunchLink">
      Launch Link &raquo;
    </button>
    @if (Error is not null)
    {
        <p class="alert-danger">Error</p>
    }
</div>

@code {
    private string? Error { get; set; }

    class linkresult
    {
        public bool ok { get; set; }
        public string public_token { get; set; } = string.Empty;
    };

    private IJSObjectReference? module;

    private async Task LaunchLink()
    {
        try
        {
            Error = null;

            // First, let's see if we already HAVE credentials!
            context.Credentials = await Http.GetFromJsonAsync<PlaidCredentials>("link/info");
            if (context.Credentials?.AccessToken is null)
            {
                // Step 1: Get link token from server
                var link_token = await Http.GetFromJsonAsync<string>("link/CreateLinkToken");

                // Step 2: Get public token from Link via JS interop
                var result = await module!.InvokeAsync<string>("launch_link",link_token);

                if (result is null)
                    throw new ApplicationException("Calling link failed");

                var link_result = System.Text.Json.JsonSerializer.Deserialize<linkresult>(result);

                if (link_result?.ok != true)
                {
                    var parse = System.Text.Json.JsonDocument.Parse(result);
                    var err = parse.RootElement.GetProperty("err");
                    var metadata = parse.RootElement.GetProperty("metadata");
                    throw new ApplicationException("Link failed");               
                }

                // Step 3: Send public token back to server, which will populate credentials
                var response = await Http.PostAsJsonAsync<linkresult>("link/ExchangePublicToken",link_result);
                if (!response.IsSuccessStatusCode)
                    throw new ApplicationException(await response.Content.ReadAsStringAsync());

                context.Credentials = await response.Content.ReadFromJsonAsync<PlaidCredentials>();   
            }

            context.LinkSuccess = true;
            context.IsItemAccess = true;
        }
        catch (Exception ex)
        {
            Error = $"Failed to Launch {ex.GetType().Name}: {ex.Message}";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Link.razor.js");                            
            }
        }
        catch (Exception ex)
        {
            Error = $"Failed to Load JS {ex.GetType().Name}: {ex.Message}";            
        }
    }
}
